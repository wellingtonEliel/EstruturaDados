
#include <stdio.h>
#include <stdio.h>
#include <stdlib.h>

//definindo o nodo
typedef struct sNodo{
  int dado;
  struct sNodo *next;
  struct sNodo *prev;
  int movimento;
} Nodo;

//definindo lista com head, tail e tamanho
typedef struct sLista{
  struct sNodo *head;
  struct sNodo *tail;
  int size;
} Lista;

//prototipaC'C#o
Nodo *alocaMemoriaNodo ();
Lista *alocaMemoriaLista ();
Nodo *criaNodo (int);
Lista *criaLista ();
int insereElementoNaLista (Lista *,Lista *, Nodo *, int);
void percorreListaHeadTail (Lista * lista, Lista * listaEspera);
Nodo *encontraElementoNaLista (Lista * , int);
int removeElementoNaLista (Lista *, Lista*, Nodo *);
int removeElementoNaListaEspera(Lista *, Nodo *);



int main (){
    Lista *lista1;
    Nodo *nodo;
    Nodo *nodo1;
    Lista* listaEspera;
    listaEspera = alocaMemoriaLista();
    lista1 = alocaMemoriaLista ();
    insereElementoNaLista(lista1, listaEspera, lista1 -> tail, 55);
    insereElementoNaLista(lista1, listaEspera, lista1 -> tail, 90);
    insereElementoNaLista(lista1, listaEspera, lista1 -> tail, 13);
    insereElementoNaLista(lista1, listaEspera, lista1 -> tail, 24);
    insereElementoNaLista(lista1, listaEspera, lista1 -> tail, 56);
    insereElementoNaLista(lista1, listaEspera, lista1 -> tail, 91);
    insereElementoNaLista(lista1, listaEspera, lista1 -> tail, 14);
    insereElementoNaLista(lista1, listaEspera, lista1 -> tail, 25);
    insereElementoNaLista(lista1, listaEspera, lista1 -> tail, 57);
    insereElementoNaLista(lista1, listaEspera, lista1 -> tail, 92);
    insereElementoNaLista(lista1, listaEspera, lista1 -> tail, 15);
    insereElementoNaLista(lista1, listaEspera, lista1 -> tail, 26);
    insereElementoNaLista(lista1, listaEspera, lista1 -> tail, 16);
    
    int removedor = 14;
    nodo = encontraElementoNaLista (lista1, removedor);
    removeElementoNaLista (lista1, listaEspera, nodo);
    
    removedor = 57;
    nodo = encontraElementoNaLista (lista1, removedor);
    removeElementoNaLista (lista1, listaEspera, nodo);
    
    removedor = 92;
    nodo = encontraElementoNaLista (lista1, removedor);
    removeElementoNaLista (lista1, listaEspera, nodo);
    
    removedor = 13;
    nodo = encontraElementoNaLista (lista1, removedor);
    removeElementoNaLista (lista1, listaEspera, nodo);
    
    percorreListaHeadTail(lista1, listaEspera);
    return 0;
}

//alocando memoria para o nodo e para lista
Nodo * alocaMemoriaNodo (){
  return (Nodo *) malloc (sizeof (Nodo));
}

Lista *alocaMemoriaLista (){
  return (Lista *) malloc (sizeof (Lista));
}

Nodo *criaNodo (int dado){
  Nodo *nodo = alocaMemoriaNodo ();
  if (nodo != NULL){
      nodo->dado = dado;
      nodo->next = NULL;
      nodo->prev = NULL;
      nodo->movimento = 0;
    }
  return nodo;
}

Lista *criaLista (){
  Lista *lista = alocaMemoriaLista ();
  if (lista != NULL){
      lista->head = NULL;
      lista->tail = NULL;
      lista->size = 0;
    }
  return lista;
}

int insereElementoNaLista (Lista * lista, Lista * listaEspera, Nodo * pivo, int dado){
    Nodo *novo = criaNodo (dado);
    if(lista -> size >  9){
       printf("\nO estacionamento está cheio, o carro %i esperará na lista de espera", dado);
        novo->dado = dado;
        if (listaEspera->size == 0){
            listaEspera->head = novo;
            listaEspera -> tail = novo;
        }else{
            novo->prev = listaEspera->tail;
            listaEspera->tail->next = novo;
            listaEspera->tail = novo;
        }
        listaEspera->size++;
        return listaEspera ->size;
    } else if(lista -> size <= 10){
        printf("\nO carro %i entrará na vaga de estacionamento", dado);
        novo->dado = dado;
        if (lista->size == 0){
            lista->head = novo;
            lista -> tail = novo;
        }else{
            novo->next = pivo->next;
            novo->prev = pivo;
            if (pivo->next == NULL){
                lista->tail = novo;
            }else{
                pivo->next->prev = novo;
            }
            pivo->next = novo;
        }
        lista->size++;
        return lista->size;
    }
    
}

Nodo * encontraElementoNaLista (Lista * lista, int dado){
    Nodo *nodo = lista->head;
    if (nodo != NULL){
        while (nodo != NULL){
            if (nodo->dado == dado){
                return nodo;
            }
            nodo = nodo->next;
        }
        return NULL;
    }
        return NULL;
}


int removeElementoNaLista (Lista * lista, Lista * listaEspera, Nodo * elementoAntigo) {
    if (lista->size == 0){
        return 0;
    }else if (elementoAntigo == NULL){
        return 0;
    }else {
        if (lista->head == elementoAntigo){
        lista->head = elementoAntigo->next;
        if (lista->head == NULL){
          lista->tail == NULL;
        }else{
          elementoAntigo->next->prev = NULL;
        }
        }else{
            elementoAntigo->prev->next = elementoAntigo->next;
            if (elementoAntigo->next == NULL){
              lista->tail = elementoAntigo->prev;
            }else{
             elementoAntigo->next->prev = elementoAntigo->prev;
            }
        }
        
        Nodo *nodo = elementoAntigo->next;
        while(nodo != NULL){
            nodo->movimento ++;
            nodo = nodo->next;
        }
        printf("\n\nO carro %i foi retirado, seu movimento foi de %i", elementoAntigo->dado, elementoAntigo->movimento);
        free (elementoAntigo);
        lista->size--;
        if(listaEspera->head != NULL ){
            insereElementoNaLista ( lista, listaEspera, lista->tail, listaEspera->head->dado);
            removeElementoNaListaEspera(listaEspera, listaEspera->head);
        }
        return 1;
    }
}


int removeElementoNaListaEspera(Lista * lista, Nodo * elementoAntigo){
    if (lista->size == 0){
        return 0;
    }else if (elementoAntigo == NULL){
        return 0;
    }else {
        if (lista->head == elementoAntigo){
        lista->head = elementoAntigo->next;
        if (lista->head == NULL){
          lista->tail == NULL;
        }else{
          elementoAntigo->next->prev = NULL;
        }
        }else{
            elementoAntigo->prev->next = elementoAntigo->next;
            if (elementoAntigo->next == NULL){
              lista->tail = elementoAntigo->prev;
            }else{
             elementoAntigo->next->prev = elementoAntigo->prev;
            }
        }
    
        free (elementoAntigo);
        lista->size--;
        return 1;
    }
}

void percorreListaHeadTail (Lista * lista, Lista *listaEspera){
    Nodo *nodo = lista->head;
    printf("\nLista de carros estacionados: ");
    if (nodo != NULL){
        while (nodo != NULL){
            printf ("%i, ", nodo->dado);
            nodo = nodo->next;
        }
    }else{
        printf ("Lista está vazia");
    }
    printf("\nLista de espera: ");
    
    Nodo *nodo1 = listaEspera->head;
    if (nodo1 != NULL){
        while (nodo1 != NULL){
            printf ("%i, ", nodo1->dado);
            nodo1 = nodo1->next;
        }
    }else{
        printf ("Lista está vazia");
    }
}
